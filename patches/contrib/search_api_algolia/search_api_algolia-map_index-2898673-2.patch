diff --git a/search_api_algolia.module b/search_api_algolia.module
index 0dbfa6a..73cc841 100644
--- a/search_api_algolia.module
+++ b/search_api_algolia.module
@@ -6,3 +6,43 @@
  */
 
 /* use Drupal\search_api_algolia\Plugin\search_api\backend; */
+use AlgoliaSearch\Client;
+use AlgoliaSearch\AlgoliaException;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\search_api\Entity\Index;
+
+/**
+ * Implements hook_form_FORM_ID_alter().
+ */
+function search_api_algolia_form_search_api_index_edit_form_alter(&$form, FormStateInterface $form_state) {
+  $index = Index::load($form['id']['#default_value']);
+
+  $server = $index->getServerInstance();
+  if ($server->getBackendId() == 'search_api_algolia') {
+    try {
+      $backend = $server->getBackend();
+
+      $indexes = $backend->listIndexes();
+
+      $indexes = ['_none' => t('- none -')] + $indexes;
+
+      $form['options']['algolia_index_name'] = [
+        '#type' => 'radios',
+        '#title' => t('Available Algolia indexes'),
+        '#options' => $indexes,
+        '#default_value' => ($index->getOption('algolia_index_name')) ? $index->getOption('algolia_index_name') : '_none',
+      ];
+    }
+    catch (Exception $exception) {
+      drupal_set_message(t('Unable to connect to Algolia.'), 'error');
+      watchdog_exception('search_api_algolia', $exception, 'Unable to connect to Algolia.');
+      if ($index_name = $index->getOption('algolia_index_name')) {
+        $form['options']['algolia_index_name'] = [
+          '#type' => 'item',
+          '#title' => t('Algolia index'),
+          '#markup' => $index_name,
+        ];
+      }
+    }
+  }
+}
diff --git a/src/Plugin/search_api/backend/SearchApiAlgoliaBackend.php b/src/Plugin/search_api/backend/SearchApiAlgoliaBackend.php
index 4a16a17..f1f34f5 100644
--- a/src/Plugin/search_api/backend/SearchApiAlgoliaBackend.php
+++ b/src/Plugin/search_api/backend/SearchApiAlgoliaBackend.php
@@ -332,12 +332,33 @@ class SearchApiAlgoliaBackend extends BackendPluginBase implements PluginFormInt
       $this->algoliaClient = new Client($this->getApplicationId(), $this->getApiKey());
 
       if ($index && $index instanceof IndexInterface) {
-        $this->setAlgoliaIndex($this->algoliaClient->initIndex($index->get('id')));
+        $indexId = ($index->getOption('algolia_index_name')) ? $index->getOption('algolia_index_name') : $index->get('id');
+
+        $this->setAlgoliaIndex($this->algoliaClient->initIndex($indexId));
       }
     }
   }
 
   /**
+   * Retrieves the list of available Algolia indexes.
+   *
+   * return array
+   */
+  public function listIndexes() {
+    $algoliaClient = new Client($this->getApplicationId(), $this->getApiKey());
+
+    $indexes = $algoliaClient->listIndexes();
+    $indexes_list = [];
+    if (isset($indexes['items'])) {
+      foreach ($indexes['items'] as $index) {
+        $indexes_list[$index['name']] = $index['name'];
+      }
+    }
+
+    return $indexes_list;
+  }
+
+  /**
    * Retrieves the logger to use.
    *
    * @return \Psr\Log\LoggerInterface
