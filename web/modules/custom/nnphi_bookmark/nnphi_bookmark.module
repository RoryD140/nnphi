<?php

use Drupal\user\UserInterface;
use Drupal\flag\FlaggingInterface;
use Drupal\nnphi_bookmark\BookmarkFolderService;

/**
 * Implements hook_entity_extra_field_info().
 */
function nnphi_bookmark_entity_extra_field_info() {
  $extra = [];

  $extra['bookmark_folder']['bookmark_folder']['display']['nodes'] = [
    'label' => t('Trainings'),
    'description' => t('Bookmarks that belong to this folder'),
    'weight' => 0,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_user_cancel().
 */
function nnphi_bookmark_user_cancel($edit, $account, $method) {
  \Drupal::service('nnphi_bookmark.folder')->userFolderRemoval($account);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function nnphi_bookmark_user_delete(UserInterface $account) {
  // Delete any folders associated with the account.
  try {
    $folder_storage = \Drupal::entityTypeManager()
      ->getStorage('bookmark_folder');
    $folder_ids = $folder_storage->getQuery()
      ->condition('uid', $account->id())
      ->execute();
    if (empty($folder_ids)) {
      return;
    }
    $folders = $folder_storage->loadMultiple($folder_ids);
    $folder_storage->delete($folders);
  }
  catch (Exception $exception) {
    watchdog_exception('nnphi_bookmark', $exception);
    \Drupal::logger('nnphi_bookmark')->error('Unable to delete bookmark folders for account @uid',
      ['@uid' => $account->id()]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function nnphi_bookmark_flagging_insert(FlaggingInterface $flag) {
  nnphi_bookmark_clear_bookmark_folder_cache($flag);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function nnphi_bookmark_flagging_update(FlaggingInterface $flag) {
  nnphi_bookmark_clear_bookmark_folder_cache($flag);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function nnphi_bookmark_flagging_delete(FlaggingInterface $flag) {
  nnphi_bookmark_clear_bookmark_folder_cache($flag);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function nnphi_bookmark_bookmark_folder_delete(\Drupal\nnphi_bookmark\Entity\BookmarkFolderInterface $folder) {
  // Remove this folder from any flaggings.
  $flagging_ids = \Drupal::entityQuery('flagging')
    ->condition(BookmarkFolderService::FLAGGING_FOLDER_FIELD, [$folder->id()], 'IN')
    ->execute();
  if (empty($flagging_ids)) {
    return;
  }
  /** @var FlaggingInterface[] $flaggings */
  $flaggings = \Drupal::entityTypeManager()->getStorage('flagging')
    ->loadMultiple($flagging_ids);
  foreach ($flaggings as $flagging) {
    $flagging->get(BookmarkFolderService::FLAGGING_FOLDER_FIELD)->filter(function($value) use ($folder) {
      return (int)$value->getString() !== (int)$folder->id();
    });
    $flagging->save();
  }
}

function nnphi_bookmark_clear_bookmark_folder_cache(FlaggingInterface $flag) {
  if (!$flag->hasField('field_bookmark_folder') || $flag->get('field_bookmark_folder')->isEmpty()) {
    return;
  }
  $folder_id = $flag->field_bookmark_folder->target_id;
  if ($folder_id) {
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['bookmark_folder:' . $folder_id]);
  }
}

/**
 * Implements hook_theme().
 */
function nnphi_bookmark_theme($existing, $type, $theme, $path) {
  return [
    'user_bookmarks_page' => [
      'variables' => ['bookmarks' => '', 'folders' => ''],
    ],
  ];
}
