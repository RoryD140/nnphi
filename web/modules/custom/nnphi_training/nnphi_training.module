<?php


/**
 * @file
 * Contains nnphi_training.module.
 */

use \Drupal\node\Entity\Node;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \IndefiniteArticle\IndefiniteArticle;
use Drupal\Core\Url;


/**
 * Implements hook_ENTITY_TYPE_view().
 * @param array $build
 * @param \Drupal\node\Entity\Node $node
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function nnphi_training_node_view(array &$build, Node $node, EntityViewDisplayInterface $display, $view_mode) {

  if( $node->getType() !== 'training')  {
    return;
  }

  // Adjust cost field markup to "Free" if value is 0
  // Used on both teaser and full view modes
  $cost_field = $node->get('field_training_cost');
  if(!$cost_field->isEmpty()) {
    if($cost_field->getValue()[0]['value'] === '0.00') {
      $build['field_training_cost'][0]['#markup'] = t('Free');
    }
  }

  if($view_mode !== 'full')  {
    return;
  }


  // Attach slider library if there are values in related training field
  if(!$node->get('field_related_trainings')->isEmpty()) {
    $build['#attached']['library'][] = 'nnphi_training/slider';
  }

  // Set target to blank on training link
  if(isset($build['field_training_url'])) {
    $build['field_training_url'][0]['#attributes']['target'] = '_blank';
  }


  $length_type = $node->get('field_training_length_type')->getValue();

  if(empty($length_type) || $length_type[0]['value'] === '1') {
    // If length type is module, set attribute to use in template to display
    // the module times from the module time field
    $build['#attributes'] = array('display_module_times' => TRUE);
  }


  // Build the subtitle string. Only do this if we have proficiency or CEUS
  if (
    $display->getComponent('subtitle') &&
    (!$node->get('field_training_ceus_offered')->isEmpty() || !$node->get('field_training_level')->isEmpty())
  ) {

    // Use the modified cost string
    if(!$node->get('field_training_cost')->isEmpty()) {
      $cost = $build['field_training_cost'][0]['#markup'];
    }

    $proficiency = '';
    if(!$node->get('field_training_level')->isEmpty()) {
      $proficiency = strtolower($build['field_training_level'][0]['#title']);

      // Add appropriate a/an
      $proficiency = IndefiniteArticle::A($proficiency);
    }


    // Build comma-separated list of CEUS with "and"

    $ceu = '';
    $offering = '';
    $is = '';

    if(!$node->get('field_training_ceus_offered')->isEmpty()) {
      $ceus = $node->get('field_training_ceus_offered')->referencedEntities();

      // Just use the single label if we only have one
      if (count($ceus) === 1) {
        $ceu = $ceus[0]->label();
      }
      else {
        // Get the CEU labels
        $ceu_labels = array_map(function ($item) {
          return $item->label();
        }, $ceus);


        $last_element = array_pop($ceu_labels);

        // Add "and" to last string
        $last_string = t("and @last",
          [
            '@last' => $last_element,
          ]
        );

        array_push($ceu_labels, $last_string);

        // If there are just two items, no comma
        $glue = (count($ceus) === 2) ? ' ' : ', ';
        $ceu = implode($glue, $ceu_labels);
      }


      // Only add the "offering" string if we have CEUs. Change conjugation if
      // there's not proficiency
      if(isset($proficiency)) {
        $offering = t(' offering');
        $is = t(' is');
      } else {
        $offering = t(' offers');
      }

    }

    // Create translated string
    $text = t("This@is @proficiency course@offering @ceu",
      [
        '@proficiency' => $proficiency,
        '@ceu' => $ceu,
        '@offering' => $offering,
        '@is' => $is
      ]
    );

    // Add variables to template
    $build['subtitle'] = [
      '#theme' => 'training_subtitle',
      '#text' => $text,
      '#cost' => $cost,
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nnphi_training_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getType() !== 'training') {
    return;
  }
  // Require the summary field.
  $form['field_training_description']['widget'][0]['summary']['#required'] = TRUE;
  $form['field_training_description']['widget'][0]['summary']['#description'] = t('The summary will be displayed in search results and where this training appears as a "related training."');
  // Remove the JS that hides the summary.
  $attached = array_search('text/drupal.text', $form['field_training_description']['widget'][0]['summary']['#attached']['library']);
  unset($form['field_training_description']['widget'][0]['summary']['#attached']['library'][$attached]);
}



/**
 * Implements hook_entity_extra_field_info().
 */
function nnphi_training_entity_extra_field_info() {
  $extra = [];
  $extra['node']['training']['display']['subtitle'] = [
    'label' => t('Subtitle'),
    'description' => t('Sentence describing type of course, what it offers, and cost'),
    'weight' => 1,
    'visible' => TRUE,
  ];

  return $extra;
}


/**
 * Implements hook_theme().
 */
function nnphi_training_theme($existing, $type, $theme, $path) {
  return [
    'nnphi_training_search_page' => [
      'variables' => [],
      'template' => 'search-page',
    ],
    'training_autocomplete_footer' => [
      'variables' => ['url' => Url::fromRoute('nnphi_training.instant_search')->toString()],
      'template' => 'autocomplete-footer',
    ],

    'training_subtitle' => [
      'variables' => [
        'text' => '',
        'cost' => ''
      ],
      'template' => 'training-subtitle',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function nnphi_training_preprocess_nnphi_training_search_page(&$variables) {
  $variables['#attached']['library'][] = 'nnphi_training/instant-search';
  $variables['#attached']['library'][] = 'nnphi_training/moment';
  $variables['#attached']['drupalSettings']['trainingSearch'] = nnphi_training_search_js_settings();
}

/**
 * Get an array of javascript settings for Algolia training search.
 *
 * @return array
 */
function nnphi_training_search_js_settings() {
  $config = \Drupal::config('nnphi_training.search.config');
  return [
    'api_key' => $config->get('api_key'),
    'app_id' => $config->get('app_id'),
    'index' => $config->get('index'),
    'search_page' => Url::fromRoute('nnphi_training.instant_search')->toString(),
  ];
}
