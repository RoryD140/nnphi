<?php

/**
 * @file
 * Contains nnphi_user.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\nnphi_user\Plugin\Block\UserProfile;
use Drupal\Core\Url;
use Drupal\user\UserInterface;

/**
 * Implements hook_module_implements_alter()
 * @param $implementations
 * @param $hook
 */
function nnphi_user_module_implements_alter(&$implementations, $hook) {

  // we use hook_form_FORM_ID_alter() to alter a form element created in
  // password_policy.module, so this ensures that our hook runs after that element
  // is created in password_policy_form_user_form_alter
  if($hook === 'form_alter') {
    if (isset($implementations['nnphi_user'])) {
      // Move nnphi_user to the end of the array
      unset($implementations['nnphi_user']);
      $implementations['nnphi_user'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function nnphi_user_preprocess_page(&$variables) {

  $route = \Drupal::routeMatch()->getRouteName();

  // Create custom title for user login pages so that it can be within
  // the layout-container in page.html.twig
  if($route === 'user.register') {
    $variables['custom_title'] = t('Register');
  } elseif($route === 'user.login') {
    $variables['custom_title'] = t('Log In');
  } elseif($route === 'user.pass') {
    $variables['custom_title'] = t('Reset Your Password');
  } elseif ($route === 'nnphi_user.suggestions') {
    $variables['custom_title'] = t('Suggested Trainings');
  } elseif ($route === 'nnphi_bookmark.user_list') {
    $variables['custom_title'] = t('Bookmarked Trainings');
  } elseif ($route === 'entity.user.canonical') {
    $user = \Drupal::routeMatch()->getParameter('user');
    $name = $user->getDisplayName();
    $variables['custom_title'] = t('Welcome, @name', ['@name' => $name]);
  }

}

/**
 * Implements hook_link_alter().
 */
function nnphi_user_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];
  if (!$url->isRouted()) {
    return;
  }
  $route_name = $url->getRouteName();
  if ($route_name === 'entity.user.edit_form') {
    $params = $url->getRouteParameters();
    $account = \Drupal::entityTypeManager()->getStorage('user')->load($params['user']);
    // Admins should get the "edit" link.
    if (\Drupal::currentUser()->id() !== $account->id()) {
      return;
    }
    // Logged in users should get the correct title.
    if (!UserProfile::accountIsComplete($account)) {
      $variables['text'] = t('Complete Your Profile');
    }
    else {
      $variables['text'] = t('Edit Your Profile');
    }
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function nnphi_user_entity_extra_field_info() {
  $extra = [];

  $extra['user']['user']['form']['suggest_terms'] = [
    'label' => t('Suggest terms'),
    'description' => t('Field for user suggesting interest terms'),
    'weight' => 0,
  ];

  return $extra;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nnphi_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Rewrite the table headers on the password_policy table so they're more useful
  if(isset($form['account']['password_policy_status']['#header'])) {
    $form['account']['password_policy_status']['#header'][0] = t('Password Requirements');
    unset($form['account']['password_policy_status']['#header'][1]);
    unset($form['account']['password_policy_status']['#header'][2]);
  }

  // Hide Role field from non-admins
  $user_role = \Drupal::currentUser()->getRoles();
  if(!in_array("administrator", $user_role)) {
    $form['field_user_role'] = [
      '#access' => FALSE,
    ];
  }

  // Add the suggest job title field.
  $form['suggest_terms'] = [
    '#type' => 'textfield',
    '#title' => t('Suggest interests'),
    '#description' => t("Don't see your interest listed? Please enter it here."),
  ];
  
  $form['actions']['submit']['#submit'][] = 'nnphi_user_register_form_submit';

  $form['#after_build'][] = 'nnphi_user_register_form_after_build';

  // Override default submit text
  $form['actions']['submit']['#value'] = t('Save Changes');
  
  // Add "Cancel" button
  $account = $form_state->getFormObject()->getEntity();
  $form['actions']['cancel'] = array(
    '#title' => t('Cancel'),
    '#type' => 'link',
    '#url' => Url::fromRoute('entity.user.canonical', array('user' => $account->id())),
    '#attributes' => array(
      'class' => array('button', 'button-secondary', 'form-submit', 'cancel'),
    ),
    '#prefix' => '<div id="button-divider"></div>',
  );
}

/**
 * Extra submit callback for the user register form.
 */
function nnphi_user_register_form_submit($form, FormStateInterface $form_state) {
  if (!$form_state->getValue('suggest_terms')) {
    return;
  }
  // Create a term for the user's suggested job title.
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')
    ->create([
      'vid' => 'suggested_interests',
      'name' => $form_state->getValue('suggest_terms'),
      'uid' => $form_state->get('user')->id()
    ]);
  $term->save();
}

/**
 * User register/profile form after_build callback.
 */
function nnphi_user_register_form_after_build($element) {
  if (isset($element['field_user_interests']['widget'])) {
    $element['field_user_interests']['widget']['add_more']['#value'] = t('Add another topic');
  }
  return $element;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function nnphi_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add submit handler to set redirect.
  $form['#submit'][] = '_nnphi_user_user_login_form_submit';
}


/**
 * Custom submit handler for login form.
 */
function _nnphi_user_user_login_form_submit($form, FormStateInterface $form_state) {
  // Set redirect to front page
  $form_state->setRedirect('<front>');
  drupal_set_message(t('Log in successful.'), 'status');
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function nnphi_user_theme_suggestions_user(array $variables) {
  // Add view mode to user template suggestions.
  if (!empty($variables['elements']['#view_mode'])) {
    return ['user__' . $variables['elements']['#view_mode']];
  }
}
