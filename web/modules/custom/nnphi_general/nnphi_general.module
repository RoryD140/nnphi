<?php

/**
 * @file
 * Contains nnphi_general.module.
 */

use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\block_content\BlockContentInterface;
use \Drupal\Component\Utility\Html;
use \Drupal\panels\Plugin\DisplayVariant\PanelsDisplayVariant;
use \Drupal\Core\Render\Element\StatusMessages;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function nnphi_general_block_content_view(array &$build, BlockContentInterface $block, EntityViewDisplayInterface $display, $view_mode) {

  // Add class to link block if boolean is checked to make button outline
  if ($block->bundle() === 'link_block') {
    
    // Add block class here instead of in template since we're adding classes anyway
    $build['#attributes']['class'][] = 'link-block';

    $block_outline_field = $block->get('field_link_block_outline_btn');
    if(!$block_outline_field->isEmpty()) {
      $value = $block_outline_field->getValue();
      if($value[0]['value'] === '1') {
        $build['#attributes']['class'][] = 'link-block-outline';
      }
    }
  }

  // Add class to all blocks, mainly being used for down arrow JS
  $build['#attributes']['class'][] = 'block';

  if($block->bundle() === 'steps_block') {
    $build['#attributes']['class'][] = 'steps-block';
  }

  if($block->bundle() === 'background_block') {
    $build['#attributes']['class'][] = 'background-block';
  }


  if($block->bundle() === 'search_training') {
    $build['#attached']['library'][] = 'nnphi_general/arrow';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 * @param array $suggestions
 * @param array $variables
 */
function nnphi_general_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_preprocess_html().
 * @param $variables
 */
function nnphi_general_preprocess_html(&$variables) {

  // Use route to create an additional page class so that we can target specific
  // pages, e.g., page-user-register
  $route = \Drupal::routeMatch();
  $route_name = $route->getRouteName();
  $variables['attributes']['class'][]  = HTML::cleanCssIdentifier('page-' . $route_name, ['.' => '-']);

  // If this is a training node or the training search page, add the class for the graphic header
  // Otherwise it uses the gradient header
  $node = $route->getParameter('node');

  $banner_class = 'gradient-banner';

  if(($node !== null && $node->getType() === 'training') || $route_name === 'nnphi_training.instant_search') {
    $banner_class = 'training-banner';
  }

  $variables['attributes']['class'][] = $banner_class;

  // Set maintenance page title
  $maintenance_mode = \Drupal::state()->get('system.maintenance_mode');
  if (!empty($maintenance_mode)) {
    // Only set page title on maintenance page
    // so that admin pages keep normal titles
    if(isset($variables['page']['#theme']) && $variables['page']['#theme'] === 'maintenance_page') {
      $variables['head_title']['title'] = t('Get Notified');
    }
  }
}

/**
 * Implements hook_panels_ipe_blocks_alter().
 */
function nnphi_general_panels_ipe_blocks_alter(array &$blocks = [], PanelsDisplayVariant $panels_display) {
  $providers = [
    'nnphi_training',
    'block_content',
    'nnphi_general',
    'webform',
    'nnphi_micro_assessment',
  ];
  foreach ($blocks as $delta => $block) {
    if (!in_array($block['provider'], $providers) ) {
      unset($blocks[$delta]);
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function nnphi_general_query_sort_by_random_alter(AlterableInterface $query) {
  $query->orderRandom();
}

/**
 * Implements hook_link_alter().
 */
function nnphi_general_link_alter(&$variables) {
  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];
  // If the media entity is a File, show the user the file path instead of
  // the media entity path.
  if ($url->isRouted() && $url->getRouteName() === 'entity.media.canonical') {
    if (!isset($variables['options']['entity'])) {
      return;
    }
    try {
      /** @var \Drupal\media\MediaInterface $media */
      $media = $variables['options']['entity'];
      if ($media !== null && $media->bundle() === 'file') {
        /** @var \Drupal\file\FileInterface $file */
        $file = $media->get('field_media_file')->entity;
        $url = \Drupal\Core\Url::fromUri(file_create_url($file->getFileUri()));
        $variables['url'] = $url;
      }
    }
    catch (\Exception $exception) {
      watchdog_exception('nnphi_general', $exception);
      \Drupal::logger('nnphi_general')->error('Unable to replace file URL for media @id', ['@id' => $media->id()]);
    }
  }
}

/**
 * Implements hook_preprocess_block().
 */
function nnphi_general_preprocess_block(&$variables) {
  // Set ID so we can use it for the menu theme suggestion
  if(isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function nnphi_general_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);

    $block = Block::load($hook);
    $region = $block->getRegion();
    $suggestions[] = $variables['theme_hook_original'] . '__' . $region . '__' . $hook;
  }
}

/**
 * Implements hook_form_alter().
 */
function nnphi_general_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add honeypot protection to all Webforms.
  if (isset($form['#webform_id'])) {
    honeypot_add_form_protection($form, $form_state, ['honeypot']);
  }
}
